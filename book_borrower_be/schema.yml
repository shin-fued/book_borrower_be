openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /analytics/analytics/:
    get:
      operationId: analytics_analytics_list
      tags:
      - analytics
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Analytics'
          description: ''
  /analytics/book-popularity/{id}/:
    get:
      operationId: analytics_book_popularity_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - analytics
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPopularity'
          description: ''
  /analytics/user-activity/{id}/:
    get:
      operationId: analytics_user_activity_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - analytics
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivity'
          description: ''
  /books/books/:
    get:
      operationId: books_books_list
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: title
        schema:
          type: string
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookList'
          description: ''
    post:
      operationId: books_books_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
  /books/books/{slug}/:
    get:
      operationId: books_books_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
    put:
      operationId: books_books_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
    patch:
      operationId: books_books_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBook'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBook'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
    delete:
      operationId: books_books_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /books/category-price/:
    get:
      operationId: books_category_price_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryPriceList'
          description: ''
    post:
      operationId: books_category_price_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPrice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryPrice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryPrice'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPrice'
          description: ''
  /books/category-price/{id}/:
    get:
      operationId: books_category_price_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category price.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPrice'
          description: ''
    put:
      operationId: books_category_price_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category price.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPrice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryPrice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryPrice'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPrice'
          description: ''
    patch:
      operationId: books_category_price_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category price.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryPrice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryPrice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryPrice'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPrice'
          description: ''
    delete:
      operationId: books_category_price_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category price.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /books/genre/:
    get:
      operationId: books_genre_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGenreList'
          description: ''
    post:
      operationId: books_genre_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /books/genre-book/:
    get:
      operationId: books_genre_book_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGenreBookList'
          description: ''
    post:
      operationId: books_genre_book_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenreBook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GenreBook'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GenreBook'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreBook'
          description: ''
  /books/genre-book/{id}/:
    get:
      operationId: books_genre_book_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre book.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreBook'
          description: ''
    put:
      operationId: books_genre_book_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre book.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenreBook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GenreBook'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GenreBook'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreBook'
          description: ''
    patch:
      operationId: books_genre_book_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre book.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGenreBook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGenreBook'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGenreBook'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreBook'
          description: ''
    delete:
      operationId: books_genre_book_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre book.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /books/genre/{id}/:
    get:
      operationId: books_genre_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    put:
      operationId: books_genre_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    patch:
      operationId: books_genre_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    delete:
      operationId: books_genre_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /books/transactions/:
    get:
      operationId: books_transactions_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: transaction_type
        schema:
          type: string
          enum:
          - borrow
          - return
        description: |-
          * `borrow` - Borrow
          * `return` - Return
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionsSerialiserList'
          description: ''
    post:
      operationId: books_transactions_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
  /books/transactions/{id}/:
    get:
      operationId: books_transactions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this books users transactions.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
    put:
      operationId: books_transactions_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this books users transactions.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
    patch:
      operationId: books_transactions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this books users transactions.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTransactionsSerialiser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTransactionsSerialiser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTransactionsSerialiser'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
    delete:
      operationId: books_transactions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this books users transactions.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /books/transactions/book-borrowers/{slug}/:
    get:
      operationId: books_transactions_book_borrowers_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
  /books/transactions/book-orders/{transaction_type}/:
    post:
      operationId: books_transactions_book_orders_create
      parameters:
      - in: path
        name: transaction_type
        schema:
          enum:
          - borrow
          - return
          type: string
          description: |-
            * `borrow` - Borrow
            * `return` - Return
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
  /books/transactions/borrow/:
    post:
      operationId: books_transactions_borrow_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
  /books/transactions/borrower-books/{username}/:
    get:
      operationId: books_transactions_borrower_books_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
  /books/transactions/return/:
    post:
      operationId: books_transactions_return_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionsSerialiser'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsSerialiser'
          description: ''
  /users/users/:
    get:
      operationId: users_users_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/users/{username}/:
    get:
      operationId: users_users_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_users_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_users_partial_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_users_destroy
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /users/users/{username}/profile/:
    get:
      operationId: users_users_profile_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    Analytics:
      type: object
      properties:
        total_books:
          type: integer
        total_users:
          type: integer
        total_transactions:
          type: integer
        total_revenue:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        top_books:
          type: array
          items:
            type: string
        avg_borrow_days:
          type: string
      required:
      - avg_borrow_days
      - top_books
      - total_books
      - total_revenue
      - total_transactions
      - total_users
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
        volume:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        condition:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 255
        category:
          $ref: '#/components/schemas/CategoryEnum'
        genre:
          type: array
          items:
            type: string
          writeOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          maxLength: 60
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - category
      - condition
      - description
      - genre
      - id
      - title
      - updated_at
    BookPopularity:
      type: object
      properties:
        book_id:
          type: integer
        title:
          type: string
        borrow_count:
          type: integer
        return_count:
          type: integer
        current_borrowers:
          type: string
      required:
      - book_id
      - borrow_count
      - current_borrowers
      - return_count
      - title
    CategoryEnum:
      enum:
      - manga
      - comics
      - non-fiction
      - educational
      - magazine
      - novel
      type: string
      description: |-
        * `manga` - Manga
        * `comics` - Comics
        * `non-fiction` - Non-Fiction
        * `educational` - Educational
        * `magazine` - Magazine
        * `novel` - Novel
    CategoryPrice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        price_per_day:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
      required:
      - category
      - id
      - price_per_day
    Genre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - id
      - name
    GenreBook:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre:
          type: integer
        book:
          type: integer
      required:
      - book
      - genre
      - id
    PaginatedBookList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    PaginatedCategoryPriceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CategoryPrice'
    PaginatedGenreBookList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GenreBook'
    PaginatedGenreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
    PaginatedTransactionsSerialiserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TransactionsSerialiser'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedBook:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
        volume:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        condition:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 255
        category:
          $ref: '#/components/schemas/CategoryEnum'
        genre:
          type: array
          items:
            type: string
          writeOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          maxLength: 60
          pattern: ^[-a-zA-Z0-9_]+$
    PatchedCategoryPrice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        price_per_day:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
    PatchedGenre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
    PatchedGenreBook:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre:
          type: integer
        book:
          type: integer
    PatchedTransactionsSerialiser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book:
          type: integer
        user:
          type: integer
        updated_at:
          type: string
          format: date-time
          readOnly: true
        transaction_type:
          type: string
          readOnly: true
        transaction_cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        phone_number:
          type: string
          maxLength: 128
        role:
          type: string
          maxLength: 50
        created_at:
          type: string
          format: date-time
          readOnly: true
    TransactionsSerialiser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book:
          type: integer
        user:
          type: integer
        updated_at:
          type: string
          format: date-time
          readOnly: true
        transaction_type:
          type: string
          readOnly: true
        transaction_cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - book
      - id
      - transaction_cost
      - transaction_type
      - updated_at
      - user
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        phone_number:
          type: string
          maxLength: 128
        role:
          type: string
          maxLength: 50
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - phone_number
      - username
    UserActivity:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        total_borrows:
          type: integer
        total_returns:
          type: integer
      required:
      - total_borrows
      - total_returns
      - user_id
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
